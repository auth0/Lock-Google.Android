buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
    }
}

version = VERSION_NAME
group = GROUP

repositories {
    jcenter()
}

ext.libraries = [
        app_compat: 'com.android.support:appcompat-v7:22.1.1',
        testing: [
            dependencies.create('junit:junit:4.11') {
                exclude module: 'hamcrest-core'
            },
            'org.robolectric:robolectric:3.0',
            'com.google.guava:guava:18.0',
            'org.hamcrest:hamcrest-integration:1.3',
            'org.hamcrest:hamcrest-core:1.3',
            'org.hamcrest:hamcrest-library:1.3',
            'org.mockito:mockito-core:1.10.19',
            dependencies.create('com.squareup:fest-android:1.0.+') {
                exclude group: 'com.android.support', module: 'support-v4'
            }
        ]
]

ext.compile = [
        minSdk: 14,
        maxSdk: 22,
        buildToolsVersion: "21.1.2"
]

apply plugin: 'com.android.library'

android {
    compileSdkVersion compile.maxSdk
    buildToolsVersion compile.buildToolsVersion

    defaultConfig {
        minSdkVersion compile.minSdk
        targetSdkVersion compile.maxSdk
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.auth0.android:identity-core:1.10.1'
    compile libraries.app_compat
    compile 'com.google.android.gms:play-services-plus:8.1.0'
}

apply plugin: 'com.github.dcendents.android-maven'

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging POM_PACKAGING

                name POM_NAME
                description POM_DESCRIPTION
                url POM_URL

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id 'hzalaz'
                        name 'Hernan Zalazar'
                        email 'hernan@auth0.com'
                    }
                    developer {
                        id 'mgonto'
                        name 'Martin Gontovnikas'
                        email 'gonto@auth0.com'
                    }
                }
                scm {
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                    url POM_URL

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    failOnError false
}

afterEvaluate {
    javadoc.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

ext.bintrayProps = loadProperties('local.properties')

if (ext.bintrayProps) {
    apply plugin: 'com.jfrog.bintray'
    bintray {
        user = bintrayProps.getProperty("bintray.user")
        key = bintrayProps.getProperty("bintray.apikey")
        configurations = ['archives']
        dryRun = version.endsWith("-SNAPSHOT")
        publish = false
        pkg {
            repo = 'lock-android'
            name = POM_ARTIFACT_ID
            desc = POM_DESCRIPTION
            websiteUrl = POM_URL
            vcsUrl = POM_SCM_CONNECTION
            licenses = ["MIT"]
            userOrg = 'auth0'
            publish = false
            version {
                gpg {
                    sign = true //Determines whether to GPG sign the files. The default is false
                    passphrase = bintrayProps.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
                }
                vcsTag = VERSION_NAME
                name = VERSION_NAME
                released = new Date()
            }
        }
    }    
}

def loadProperties(fileName) {
    try {
        def props = new Properties()
        props.load(project.rootProject.file(fileName).newDataInputStream())
        return props
    } catch(all) { 
        return null
    }
}
